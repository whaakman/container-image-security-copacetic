# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build-scan-fix-push

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  patchypatch:
    permissions:
      contents: read # for actions/checkout to fetch code
      packages: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by hub/codeql-action/upload-sarif to get the Action run status
    name: patchypatch
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        images: ['acrwesdemo001.azurecr.io/demo-image:v1.0.0']

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v3

      - name: 'Docker Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}   

      - name: Login to Azure
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - run: |
      #     docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/wes-demo:${{ github.sha }}
      #     docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/wes-demo:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.images }}
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          vuln-type: 'os'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="trivy-results.json"
          vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: copa patch
        if: steps.vuln_count.outputs.vuln_count > 0
        id: copa_patch
        run: |
          wget https://github.com/project-copacetic/copacetic/releases/download/v${COPA_VERSION}/copa_${COPA_VERSION}_linux_amd64.tar.gz
          tar -xzf copa_${COPA_VERSION}_linux_amd64.tar.gz
          chmod +x copa

          docker buildx create --use --name builder
          ./copa patch -i ${{ matrix.images }} -r trivy-results.txt -t 1.16-patched
          echo "copa_patch=true" >> $GITHUB_OUTPUT
        env:
          COPA_VERSION: 0.6.0

      - name: Push patched image
        if: steps.vuln_count.outputs.vuln_count != '0'
        run: |
          docker push ${{ steps.copa.outputs.patched-image }}     
          echo "DIGEST=$(docker push ${{ steps.copa.outputs.patched-image }} | grep -oE 'sha256:[a-f0-9]{64}')" >> $GITHUB_OUTPUT    

