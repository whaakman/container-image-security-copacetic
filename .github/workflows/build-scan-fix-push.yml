# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build-scan-fix-push

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  patchypatch:
    permissions:
      contents: read # for actions/checkout to fetch code
      packages: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by hub/codeql-action/upload-sarif to get the Action run status
    name: patchypatch
    runs-on: "ubuntu-20.04"

    strategy:
      fail-fast: false
      matrix:
        images: ['acrwesdemo001.azurecr.io/demo-image:v1.0.0']

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v3

      - name: Login to Azure
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
            az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      # - name: 'Push images to ACR'
      #   uses: azure/docker-login@v1
      #   with:
      #     login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      #     username: ${{ secrets.REGISTRY_USERNAME }}
      #     password: ${{ secrets.REGISTRY_PASSWORD }}
      # - run: |
      #     docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/wes-demo:${{ github.sha }}
      #     docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/wes-demo:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.images }}
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="trivy-results.json"
          vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Run Copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        # using main for testing purposes
        # use a tag (such as v1 or v1.0.1) at a bare minimum
        # recommendation is to pin to a digest for security and stability
        # and rely on dependabot for digest/version updates
        uses: project-copacetic/copa-action@main
        with:
          image: ${{ matrix.images }}
          image-report: "trivy-results.json"
          patched-tag: "patched"
          # buildkit-version: "v0.12.4" # optional, default is latest
          # copa-version: "0.6.0" # optional, default is latest
          buildkit-version: 'v0.11.6'
          


